# See https://data-science.rcdo.co.uk/core/operations-manual/best_practice/version_control/#continuous-integration
# for guidance on editing this

# Define pipeline stages (in run order)
stages:
  - test
  - release

# Define hidden jobs (config to be reused in jobs using the `extends` keyword)
.job:
  image: nexus.rcdo.co.uk:9666/data-science/ricardo-python-poetry/py3.10-slim:v1.6.0
  before_script:
    - poetry install
    - mkdir -p ./junitxml

.test:
  extends: .job
  stage: test

.release:
  extends: .job
  stage: release

# Check code passes lint checks
Lint:
  extends: .test
  script:
    - poetry run invoke lint --check --junitxml=./junitxml/lint_report.xml
  artifacts:
    when: always
    reports:
      junit: junitxml/lint_report.xml

# Check code passes type checks
Type Check:
  extends: .test
  script:
    - poetry run invoke type-check --junitxml=./junitxml/mypy_report.xml
  artifacts:
    when: always
    reports:
      junit: junitxml/mypy_report.xml

# Check code passes unit tests
Test:
  extends: .test
  script:
    - poetry run invoke test --junitxml=./junitxml/pytest_report.xml
  artifacts:
    paths:
      - ./junitxml/
      - ./coverage_report/
    when: always
    reports:
      junit: junitxml/pytest_report.xml
  coverage: '/Total coverage: \d+\.\d+/'

# Scan for potential security vulnerabilities
Vulnerability Scan:
  extends: .test
  script:
    - mkdir -p ./vulnerability_scan
    - poetry run invoke vulnerability-scan --badge-path=./vulnerability_scan/vulnerabilities.svg --log-path=./vulnerability_scan/vulnerabilities.log
  artifacts:
    paths:
      - ./vulnerability_scan/
    when: always

# Check licenses of dependencies
License Check:
  extends: .test
  script:
    - mkdir -p ./license_check
    - poetry run invoke license-check --badge-path=./license_check/license.svg --log-path=./license_check/licenses.html
  artifacts:
    paths:
      - ./license_check/
    when: always

# Build the package wheel and upload to our internal package repository
# ***IMPORTANT: For this to work you must have "main" added under "Protected Branches"
# and "v*" added in "Protected Tags" in the GitLab project repository settings***
Release:
  extends: .release
  script:
    - poetry build
    - poetry config repositories.nexus https://nexus.rcdo.co.uk:9443/repository/pypi-hosted/
    - poetry publish -n --repository nexus
  rules:
    - if: $CI_COMMIT_TAG

# Publish coverage, license, and vulnerability reports to GitLab Pages
pages:
  stage: .post
  dependencies:
    - Test
    - License Check
    - Vulnerability Scan
  script:
    - mkdir -p public
    - mv coverage_report/index.html coverage_report/coverage.html
    - mv coverage_report/ license_check/ vulnerability_scan/ public/
  artifacts:
    paths:
      - public
    expire_in: 30 days
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
