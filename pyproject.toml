[tool.poetry]
name = "ricardo-ee-fastapi"
version = "0.0.1"
description = "Example project using FastAPI"
authors = [
    "Marco P. <Marco.P.@ricardo.com>",
]
readme = "README.md"
repository = "https://gitlab.rcdo.co.uk/data-science/examples/fastapi"
include = []
exclude = [
    "tests/**/*",
]
packages = [
    { include = "ricardo" },
]

[tool.poetry.dependencies]
python = ">=3.10,<4.0"

uvicorn = "^0.30.1"
alembic = "^1.13.2"
mysql-connector = "^2.2.9"
sqlalchemy = "^2.0.31"
loguru = "^0.7.2"
psycopg2 = "^2.9.9"
pydantic = "^2.8.2"
python-dotenv = "1.0.1"
fastapi = "^0.111.0"
[tool.poetry.group.dev.dependencies]
invoke = "*"
ruff = ">=0.2.1"  # Location of config options changes in 0.2.1
mypy = "*"
pytest = "*"
pytest-cov = "*"
pytest-custom-exit-code = "*"
coverage = "*"
mdformat-myst = "*"
bump2version = "*"
pip-audit = "*"
pip-licenses = "*"
anybadge = "*"
tablib = {extras = ["html"], version = "*"}
pretty-html-table = "*"
pre-commit = "*"
ipykernel = "*"  # Python execution backend for Jupyter

[tool.poetry.group.notebook.dependencies]
# Jupyter frontend dependencies - not required if using a system level frontend:
jupyter = "*"
jupyterlab = "*"
jupytext = "*"

[tool.jupytext]
formats = "ipynb,py:percent"

[[tool.poetry.source]]
name = "Nexus"
url = "https://nexus.rcdo.co.uk:9443/repository/pypi-group/simple/"
priority="primary"

[tool.coverage.run]
branch = true

[tool.coverage.report]
fail_under = 80  # Must be set for the gitlab coverage badge to work (can be set to 0)
show_missing = true
skip_covered = true

[tool.coverage.html]
directory = "coverage_report"

[tool.mypy]
ignore_missing_imports = true
explicit_package_bases = true
python_version = "3.10"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py310"
extend-exclude = [
    "notebooks",
]
force-exclude = true
fix = true
show-fixes = true

[tool.ruff.lint]
select = [
    "F",  # Pyflakes https://docs.astral.sh/ruff/rules/#pyflakes-f
    "E",  # pycodestyle errors https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
    "W",  # pycodestyle warnings https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
    "C90",  # mccabe https://docs.astral.sh/ruff/rules/#mccabe-c90
    "I",  # isort https://docs.astral.sh/ruff/rules/#isort-i
    "N",  # pep8-naming https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "D",  # pydocstyle https://docs.astral.sh/ruff/rules/#pydocstyle-d
    "UP",  # pyupgrade https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "ANN",  # flake8-annotations https://docs.astral.sh/ruff/rules/#flake8-annotations-ann
    "BLE",  # flake8-blind-except https://docs.astral.sh/ruff/rules/#flake8-blind-except-ble
    "B",  # flake8-bugbear https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "A",  # flake8-builtins https://docs.astral.sh/ruff/rules/#flake8-builtins-a
    "C4",  # flake8-comprehensions https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "DTZ",  # flake8-datatimez https://docs.astral.sh/ruff/rules/#flake8-datetimez-dtz
    "ISC",  # flake8-implicit-str-concat https://docs.astral.sh/ruff/rules/#flake8-implicit-str-concat-isc
    "PT",  # flake8-pytest-style https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
    "SIM",  # flake8-simplify https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "ARG",  # flake8-unused-arguments https://docs.astral.sh/ruff/rules/#flake8-unused-arguments-arg
    "PTH",  # flake8-use-pathlib https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
    "PD",  # pandas-vet https://docs.astral.sh/ruff/rules/#pandas-vet-pd
    "PL",  # Pylint https://docs.astral.sh/ruff/rules/#pylint-pl
    "RUF",  # Ruff-specific rules https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
]
ignore = [
    # (missing-type-self) Don't enforce type annotations for `self` in class functions,
    # since type checkers infer this automatically anyway:
    "ANN101",
    # (pandas-df-variable-name) We are okay with the use of `df` as a variable name:
    "PD901",
    # Codes to ignore when using ruff format
    # (https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules):
    "W191",  # Tab indentation
    "E111",  # Indentation with invalid multiple of 4
    "E114",  # Indentation with invalid multiple comment
    "E117",  # Over-indented
    "D206",  # Indent with spaces
    "D300",  # Triple single quotes
    "Q000",  # Remove bad quotes inline
    "Q001",  # Remove bad quotes docstring
    "Q002",  # Avoidable escaped quote
    "COM812",  # Missing trailing comma
    "COM819",  # Prohibited trailing comma
    "ISC001",  # Implicit string concatenation
    "ISC002",  # Implicit string concatenation for multiline
]
unfixable = [
    # (unused-variable) Automatically deleting unused variables is annoying if you
    # lint midway through writing code:
    "F841",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true

[tool.ruff.lint.per-file-ignores]
"*/tests/*" = [
    "S",  # Ignore flake8-bandit https://docs.astral.sh/ruff/rules/#flake8-bandit-s
    "ANN",  # Ignore flake8-annotations https://docs.astral.sh/ruff/rules/#flake8-annotations-ann
    "D",  # Ignore flake8-docstrings https://docs.astral.sh/ruff/rules/#pydocstyle-d
    "INP",  # Ignore flake8-no-pep420 https://docs.astral.sh/ruff/rules/#flake8-no-pep420-inp
    "PLR",  # Ignore Pylint Refactor https://docs.astral.sh/ruff/rules/#refactor-plr
]

[tool.ruff.lint.isort]
section-order = ["future", "standard-library", "third-party", "ricardo", "first-party", "local-folder"]
force-sort-within-sections = true

[tool.ruff.lint.isort.sections]
ricardo = ["ricardo"]  # Put ricardo imports in their own section
